"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var issuers = require("./issuers.json");
var types = require("./types.json");
var utils_1 = require("../utils");
/**
 * using Luhn Algorithm
 */
function verify(code) {
    var luhnArr = [
        [0, 2, 4, 6, 8, 1, 3, 5, 7, 9],
        [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
    ];
    var digits = code.split('') // spliting digits
        .map(function (digit) { return +digit; }); // parsing digits into number type
    var sum = 0;
    digits.map(function (digit, index) {
        sum += luhnArr[(digits.length - index) & 1][digit];
    });
    return (sum % 10 === 0) && (sum > 0);
}
function type(code) {
    return types[code[0]];
}
function lengths(issuer) {
    var lengths = [];
    issuer.lengths.map(function (length) {
        if (/~/g.test(length)) {
            var arr = length.split('~').map(function (number) { return +number; });
            lengths.push.apply(lengths, utils_1.range.apply(void 0, arr));
        }
        else {
            lengths.push(+length);
        }
    });
    return lengths;
}
function identifiers(issuer) {
    var identifiers = [];
    issuer.identifiers.map(function (identifier) {
        if (/~/g.test(identifier)) {
            var arr = identifier.split('~').map(function (number) { return +number; });
            identifiers.push.apply(identifiers, utils_1.range.apply(void 0, arr).map(function (number) { return "" + number; }));
        }
        else {
            identifiers.push(identifier);
        }
    });
    return identifiers;
}
function issuer(code, digits) {
    if (digits === void 0) { digits = 6; }
    var result;
    if (digits > 0) {
        for (var _i = 0, issuers_1 = issuers; _i < issuers_1.length; _i++) {
            var issuer_1 = issuers_1[_i];
            var ids = identifiers(issuer_1);
            var ls = lengths(issuer_1);
            if (ids.indexOf(code.slice(0, digits)) > -1 && ls.indexOf(code.length) > -1) {
                result = issuer_1;
            }
        }
        if (!result)
            result = issuer(code, --digits);
        else
            result = {
                name: result.name,
                alias: result.alias,
                website: result.website,
            };
    }
    return result;
}
var CreditCard = /** @class */ (function () {
    function CreditCard() {
    }
    CreditCard.verify = function (code) {
        code = code.replace(/\D/g, ''); // just in case
        return verify(code);
    };
    CreditCard.identify = function (code) {
        code = code.replace(/\D/g, ''); // just in case
        var valid = verify(code);
        return valid ? {
            type: type(code),
            issuer: issuer(code)
        } : undefined;
    };
    CreditCard.type = function (code) {
        code = code.replace(/\D/g, ''); // just in case
        return verify(code) ? type(code) : undefined;
    };
    CreditCard.issuer = function (code) {
        code = code.replace(/\D/g, ''); // just in case
        return verify(code) ? issuer(code) : undefined;
    };
    return CreditCard;
}());
exports.default = CreditCard;
